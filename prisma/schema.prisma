generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  email                  String   @unique
  name                   String?
  profilePicture         String?  // Path to character image (e.g., "male/1.png")
  stripeConnectAccountId String?  @unique
  isVerified             Boolean  @default(false)
  identityVerifiedAt     DateTime?
  subscriptionPlan       String   @default("free")
  subscriptionStatus     String   @default("active")
  subscriptionEndsAt     DateTime?
  stripeCustomerId       String?  @unique
  stripeSubscriptionId   String?  @unique
  subscriptionCurrentPeriodStart DateTime?
  subscriptionCurrentPeriodEnd   DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  notifications          Notification[]
  userLimits            UserLimits[]

  @@map("users")
}

model Gift {
  id                    String    @id @default(cuid())
  amount                Int
  currency              String    @default("eur")
  message               String?
  senderEmail           String
  recipientEmail        String
  authenticationCode    String    @unique
  isClaimed             Boolean   @default(false)
  claimedAt             DateTime?
  stripePaymentIntentId String?
  stripeTransferId      String?
  platformFee           Int?      // Platform fee in cents
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  platformFees          PlatformFee[]

  @@map("gifts")
}

model PlatformFee {
  id          String   @id @default(cuid())
  giftId      String?  @unique
  amount      Int      // Platform fee amount in cents
  currency    String   @default("eur")
  isProcessed Boolean  @default(false)
  processedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  gift        Gift?    @relation(fields: [giftId], references: [id])

  @@map("platform_fees")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'gift_sent', 'gift_received', 'gift_claimed', 'welcome', 'error', 'success'
  title     String
  message   String
  isRead    Boolean  @default(false)
  readAt    DateTime?
  data      String?  // JSON string for additional data (e.g., giftId, amount, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model UserLimits {
  id          String   @id @default(cuid())
  userId      String
  month       Int      // 1-12
  year        Int      // e.g., 2025
  totalAmount Int      @default(0) // Total amount in cents for this month
  giftCount   Int      @default(0) // Number of gifts received this month
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("user_limits")
}
